import random, asyncio, sys
from datetime import datetime
from loguru import logger
from questionary import Choice, select

from config import *
from core import *
from settings import *
from functions import *


def get_accounts() -> list[Account]:
    accs = []
    for _id, key_mnemonic in enumerate(KEY_MNEMONICS, 1):
        proxy = PROXIES.get(_id) if USE_PROXY else None
        withdraw_address = WITHDRAW_ADDRESSES.get(_id)
        accs.append(Account(_id, key_mnemonic, proxy, withdraw_address))
    return accs

def select_accounts() -> list[Account]:
    if len(ACCOUNTS) == 1:
        return ACCOUNTS
    print('–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã. –§–æ—Ä–º–∞—Ç: \n'
        '1 ‚Äî –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞\n'
        '1,2,3 ‚Äî –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–≤–æ–≥–æ, –≤—Ç–æ—Ä–æ–≥–æ –∏ —Ç—Ä–µ—Ç—å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞\n'
        '1-3 ‚Äî –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –¥–æ —Ç—Ä–µ—Ç—å–µ–≥–æ –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ\n'
        'all ‚Äî –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter)\n')
    result = input('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤—ã–±–æ—Ä: ')
    if result == 'all' or result == '':
        return ACCOUNTS
    try:
        if ',' in result:
            return [ACCOUNTS[int(i) - 1] for i in result.split(',')]
        elif '-' in result:
            return ACCOUNTS[int(result.split('-')[0]) - 1:int(result.split('-')[1])]
        elif '-' not in result and ',' not in result:
            return [ACCOUNTS[int(result) - 1]]
    except ValueError:
        raise ValueError('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–∏ÃÜ –≤—ã–±–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤!')

async def get_module() -> str:
    return await select(
        message="–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã: ",
        instruction='(–∏—Å–ø–æ–ª—å–∑—É–∏ÃÜ—Ç–µ —Å—Ç—Ä–µ–ª–æ—á–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏)',
        choices=[
            Choice("üß† –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–∞—Ä—à—Ä—É—Ç", auto),
            Choice("üéÅ –ê–Ω—Å—Ç–µ–π–∫ $MEME", unstake),
            Choice("üõ´ –û—Ç–ø—Ä–∞–≤–∫–∞ $MEME", trasnfer),
            Choice("üìä –ß–µ–∫–µ—Ä", checker_module),
            Choice("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –∞–∫–∫–∞—É–Ω—Ç–æ–≤", 'back'),
            Choice("‚ùå –í—ã—Ö–æ–¥", "exit"),
        ],
        qmark="\n‚ùì ",
        pointer="üëâ "
    ).ask_async()

async def main(accs: list[Account]) -> None | bool:
    module = await get_module()
    if module == checker_module:
        await checker_module(accs)
        return
    elif module == 'back':
        return True
    elif module == 'exit':
        raise KeyboardInterrupt
    for acc in accs:
        await module(acc)
        if acc != accs[-1]:
            await sleep(*SLEEP_BETWEEN_ACCS)


if __name__ == '__main__':
    logger.remove()
    format='<white>{time:HH:mm:ss}</white> | <bold><level>{level: <7}</level></bold> | <level>{message}</level>'
    logger.add(sink=sys.stderr, format=format)
    logger.add(sink=f'logs/{datetime.today().strftime("%Y-%m-%d")}.log', format=format)

    ACCOUNTS = get_accounts()
    logger.info(f'–ù–∞–π–¥–µ–Ω–æ: {len(ACCOUNTS)} –∫–æ—à–µ–ª—å–∫–æ–≤, {len(PROXIES)} –ø—Ä–æ–∫—Å–∏, {len(WITHDRAW_ADDRESSES)} –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞')

    if SHUFFLE_WALLETS:
        random.shuffle(ACCOUNTS)
        for id, acc in enumerate(ACCOUNTS, 1):
            acc.id = id
            acc.info = f"[‚Ññ{acc.id} - {acc.addr}]"
        logger.warning('–ö–æ—à–µ–ª—å–∫–∏ –ø–µ—Ä–µ–º–µ—à–∞–Ω—ã!')
    if USE_PROXY:
        logger.warning('–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø—Ä–æ–∫—Å–∏!')
    else:
        logger.warning('–ü—Ä–æ–∫—Å–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è!')

    loop = asyncio.get_event_loop()
    loop.run_until_complete(checker_module(ACCOUNTS))
    selected_accs = select_accounts()

    while True:
        try:
            result = loop.run_until_complete(main(selected_accs))
            if result:
                loop.run_until_complete(checker_module(ACCOUNTS))
                selected_accs = select_accounts()
        except KeyboardInterrupt:
            break
        except Exception as e:
           logger.critical(e)
           break

    print('üëãüëãüëã')
